#!/bin/sh

function connect {
	bluetoothctl power on
	bluetoothctl connect "$1" && notify-send "Bluetooth" "📢 Connected to $2" || notify-send "Bluetooth" "📢❌Failed to connect to $2"
}

cmds="" # List of commands to run (first line will be removed)

# Disconnect
connected=$(bluetoothctl info | grep Connected | cut -d ' ' -f 2)
[ "$connected" = "yes" ] &&
	cmds+="
🟠 Disconnect 	bluetoothctl disconnect 	🟠 Disconnected"

# State
state=$(bluetoothctl show | grep Powered | cut -d ' ' -f 2)
[ "$state" = "no" ] &&
	cmds+="
🟢 ON 	bluetoothctl power on	🟢 Powered ON" ||
	cmds+="
🔴 OFF 	bluetoothctl power off 	🔴 Powered OFF"

# Scan
cmds+="
🔎 Scan 	setsid -f bluetoothctl scan on 	🔎 Scanning"

# Devices
devices=$(bluetoothctl devices | cut -d ' ' -f 2-)
readarray -t devices <<< $(echo -e "$devices")
for device in "${devices[@]}"; do
	deviceName=$(echo "$device" | cut -d ' ' -f 2-)
	deviceUID=$(echo "$device" | cut -d ' ' -f 1)
	[ -z "$deviceName" ] && continue
	[ -z "$deviceName" ] && continue
	cmds="$cmds
📢 $deviceName 	connect $deviceUID $deviceName"
done

# Omit first line (empty line)
cmds=$(echo "$cmds" | tail -n +2)
# Present choices
choice="$(echo "$cmds" | cut -d'	' -f 1 | dmenu -p "Bluetooth")" || exit 1
# Execute choice
`echo "$cmds" | grep "^$choice	" | cut -d '	' -f 2`
# Show notification
notification_text=$(echo "$cmds" | grep "^$choice	" | cut -d '	' -f 3)
[ -n "$notification_text" ] && notify-send "Bluetooth" "$notification_text"
